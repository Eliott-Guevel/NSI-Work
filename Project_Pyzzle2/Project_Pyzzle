import pygame
from pygame.locals import *

# lancement de pygame
pygame.init()

# fréquence, taille, chaînes, buffer : valeurs par défaut
# 44100, -16, 2, 512
pygame.mixer.init()

# logo = pygame.image.load("monimage.png").convert()
# pygame.display.set_icon(logo)

pygame.display.set_caption("Project_Pyzzle")

# gestion des constantes
# 1920 / 2
width_screen = 960
# 1080 / 2
height_screen = 540

level_counter = 0

# création de la fenêtre
screen = pygame.display.set_mode((width_screen, height_screen))

background = pygame.image.load("background_with_tracks.png").convert_alpha()

# menu_music = pygame.mixer.music.load(.mp3")
# victory_screen_music = pygame.mixer.music.load("Final Fantasy VII - Victory Fanfare [HQ].mp3")

# click = pygame.mixer.Sound(".mp3")

# attributs : nom, taille, gras et italique (booléens)
principal_font = pygame.font.SysFont("SMW", 40)

# initialise la gestion du framerate
clock_framerate = pygame.time.Clock()

running = True

class Player:
    """gère le personnage principal"""
    def __init__(self, character_red, character_blue):
        super().__init__()
        # sprites du personnage principal
        self.character_red = pygame.image.load(character_red).convert_alpha()
        self.character_blue = pygame.image.load(character_blue).convert_alpha()

        self.x = width_screen // 2 - 40
        self.y = height_screen // 2 - 40

        # état par défaut du personnage
        self.default_state = self.character_red

    def change_state(self, state):
        if state == "red":
            self.default_state = self.character_red
        if state == "blue":
            self.default_state = self.character_blue

    def absorb_note(self, state):
        pass

class Note:
    """gère les notes arrivant"""
    def __init__(self, red_note, blue_note):
        # sprites des notes (ccouleurs en hexadécimal identiques au personnage principal)
        self.red_note = pygame.image.load("red_note.png").convert_alpha()
        self.blue_note = pygame.image.load("blue_note.png").convert_alpha()

def music_pass():
    # * 1000 puisque temps en ms
    time_passed = pygame.mixer.music.get_pos() * 1000

def score_stonks():
    #score =
    pass

def update_fps():
    fps = str(int(clock_framerate.get_fps()))
    # utilise le format RGBA (A = alpha, opacité couleur)
    fps_text = principal_font.render(fps, True, pygame.Color("violet"))
    return fps_text

# création du personnage principal (40 * 40)
# rouge : FF3C28
# bleu : 0AB9E6
character = Player("red_square.png", "blue_square.png")

note = Note("red_note.png", "blue_note.png")

# boucle principale
while running:
    for event in pygame.event.get():
        # appuyer sur la croix ou sur escape quitte le jeu
        if event.type == QUIT or event.type == KEYDOWN and event.key == K_ESCAPE:
            running = False
            pygame.quit()
            #pygame.mixer.Sound.stop()
            pygame.mixer.stop()
            pygame.mixer.quit()
        # click sur un bouton de la souris active cet évènement:
        elif event.type == pygame.MOUSEBUTTONDOWN:
            # left mouse button
            if event.button == 1:
                character.change_state("red")
            # right mouse button
            if event.button == 3:
                character.change_state("blue")

        # tutoriel
        if level_counter == 0:
            # plutôt format OGG ou WAV, apparemment
            # 1:31, 92 BPM
            tutorial_music = pygame.mixer.music.load("Sayonara Wild Heart.mp3")
            # 2ème valeur indique (en s) le moment du morceau constituant le début de la diffusion
            pygame.mixer.music.play()

        # easy
        elif level_counter == 1:
            # 1:53, 120 BPM
            second_music = pygame.mixer.music.load("Crypt of the NecroDancer OST - King Conga Kappa (King Conga).mp3")
            pygame.mixer.music.play()

        # medium
        elif level_counter == 2:
            # 2:29, 140 BPM
            third_music = pygame.mixer.music.load("OMORI OST - 106 GOLDENVENGEANCE.mp3")
            pygame.mixer.music.play()

        # hard
        elif level_counter == 3:
            # 3:07, 184 BPM
            fourth_music = pygame.mixer.music.load("Bossfight - Milky Ways.mp3")
            pygame.mixer.music.play()

    # applique le background sur le screen principal
    screen.blit(background, (0, 0))
    # affiche le fps en haut à gauche de l'écran (x, y)
    screen.blit(update_fps(), (5, 0))
    # character.default_state utilise l'état, et blit = block image transfer
    screen.blit(character.default_state, (character.x, character.y))

    screen.blit(Note.red_note, (480, 235))
    screen.blit(Note.blue_note, (5, 235))

    # 60 fps maximum
    clock_framerate.tick(60)
    # actualisation permanente du screen principal
    pygame.display.flip()
